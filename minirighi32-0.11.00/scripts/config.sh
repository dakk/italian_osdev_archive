#!/bin/bash
#
# This script is used by the top makefile to configure the kernel.
#
#      Author: Andrea Righi <righiandr@users.sf.net>
#

#
# Define a variable in the .config file.
#
# Syntax: define variable value
#
function define ()
{
	echo "$1=$2" >> $CONFIG
	echo "--> define $1=$2"
}

#
# Define a variable/macro in the config.h file.
#
# Syntax: defineh variable value
#
function defineh ()
{
	echo "#define $1 $2" >> $CONFIGH
	echo "--> C define $1 $2"
}

#
# Read a line into $ans.
#
# Syntax: readln prompt default oldval
#
function readln ()
{
	echo -e -n "$1"
	[ -z "$3" ] && echo -n "(NEW) "
	IFS='@' read ans || exit 1
	[ -z "$ans"  ] && ans=$2
}

#
# Process a string argument
#
# Syntax: string question define default
#
function string ()
{
	old=$(eval echo "\${$2}")
	if [ "$old" = "" ]; then
		def=$3;
	else
		def=$old;
	fi
	readln "$1 [$def] " "$def" "$old"
}

#
# Processes a choice list.
#
# Syntax: choice question choicelist default
#
function choice ()
{
	question="$1"
	choices="$2"
	old=
	def=$3

	# determine default answer:
	names=""
	set -- $choices
	firstvar=$2
	while [ -n "$2" ]; do
		if [ -n "$names" ]; then
			names="$names\n - $1"
		else
			names=" - $1"
		fi
		if [ "$(eval echo \"\${$2}\")" = "y" ]; then
			old=$1
			def=$1
		fi
		shift; shift
	done

	val=""
	while [ -z "$val" ]; do
		ambg=n
		readln "$question\n$names\n[$def] " "$def" "$old"
		ans=$(echo $ans | tr a-z A-Z)
		set -- $choices
		while [ -n "$1" ]; do
			name=$(echo $1 | tr a-z A-Z)
			case "$name" in
				"$ans"* | */"$ans"* )
					case "$name" in
						"$ans" | */"$ans"/* | \
						"$ans"/* | */"$ans" )
							val="$2"
							break # exact match
						;;
					esac
					if [ -n "$val" ]; then
						echo;echo \
		"  Sorry, \"$ans\" is ambiguous; please enter a longer string."
						echo
						val=""
						ambg=y
						break
					else
						val="$2"
					fi;;
			esac
			shift; shift
		done
		if [ "$val" = "" -a "$ambg" = "n" ]; then
			echo; echo \
			"  Sorry, \"$ans\" is not a valid choice; please enter a valid string.";
			echo;
			val="";
		fi
	done
	set -- $choices
}

# Check for bash #
[ -z "$BASH" ] && { echo "This script requires BASH!!!" 1>&2; exit 1; }

# This script can be used only by the top makefile #
if [ "$MAKE" == "" ]; then
	echo "Only the top makefile can run this script!!!"
	exit 1
fi

# Write the header for .config #
echo -n "Creating configuration file... "
rm -f $CONFIG
touch $CONFIG
echo "#" > $CONFIG
echo "# Automatically generated by make config: don't edit" >> $CONFIG
echo "#" >> $CONFIG
echo "done."

# Write the header for config.h #
echo -n "Creating C configuration file... "
rm -f $CONFIGH
touch $CONFIGH
echo "/*" > $CONFIGH
echo " * Automatically generated by make config; don't edit" >> $CONFIGH
echo " */" >> $CONFIGH
echo "#ifndef CONFIG_H" >> $CONFIGH
echo "#define CONFIG_H" >> $CONFIGH
echo "done."

# Define the kernel name and version in config.h #
defineh "KERNEL_NAME" "\"$KERNELNAME\""
defineh "KERNEL_VERSION" "\"$VERSION\""

# Configure the target architecture #
choice 'Processor family:' \
	"386					CONFIG_M386 \
	 486					CONFIG_M486 \
	 586/K5/5x86/6x86/6x86MX		CONFIG_M586 \
	 Pentium-Classic			CONFIG_M586TSC \
	 Pentium-MMX				CONFIG_M586MMX \
	 Pentium-Pro/Celeron			CONFIG_M686 \
	 Pentium-II				CONFIG_MPENTIUMII \
	 Pentium-III/Celeron(Coppermine)	CONFIG_MPENTIUMIII \
	 Pentium-4				CONFIG_MPENTIUM4 \
	 K6/K6-II/K6-III			CONFIG_MK6 \
	 Athlon/Duron/K7			CONFIG_MK7 \
	 Athlon-XP				CONFIG_MATHLONXP" \
	 Pentium-MMX
define "$val" "y"
defineh "$val"

string "Do you want to debug kernel messages to a serial port? (y/n)" CONFIG_REMOTE_KDBG "n"
if [ "$ans" = "y"  ] || [ "$ans" = "Y" ];
then
	choice 'Serial port for kernel debug messages:' \
		"ttyS0				TTYS0_PORT \
		 ttyS1				TTYS1_PORT \
		 ttyS2				TTYS2_PORT \
		 ttyS3				TTYS3_PORT" \
		 ttyS0
	define "CONFIG_REMOTE_KDBG" "y"
	defineh "CONFIG_REMOTE_KDBG"
	case "$val" in
		TTYS0_PORT )
			defineh "CONFIG_REMOTE_KDBG_PORT" "0x3f8";;
		TTYS1_PORT )
			defineh "CONFIG_REMOTE_KDBG_PORT" "0x2f8";;
		TTYS2_PORT )
			defineh "CONFIG_REMOTE_KDBG_PORT" "0x3e8";;
		TTYS3_PORT )
			defineh "CONFIG_REMOTE_KDBG_PORT" "0x2e8";;
	esac
fi

# string "Do you want to enable the kernel-hacking features? (y/n)" KERNEL_HACKING "y"
# if [ "$ans" = "y"  ] || [ "$ans" = "Y" ];
# then
#	define "KERNEL_HACKING" "y"
# else
#	define "KERNEL_HACKING" "n"
# fi

# Close the config.h file #
echo "#endif" >> $CONFIGH

# Well done. #
exit 0
