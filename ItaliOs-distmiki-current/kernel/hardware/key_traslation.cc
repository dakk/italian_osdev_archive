#include <cstddef>
#include <video.h>
#include <tastiera.h>
#include <cstdio>
#include <debug.h>
extern "C" {
#include <ctype.h>
};


static byte led_status;


/*file mappa tastiera autogenerato*/
static dword it[104][11];
/*	1	codice ascii*/
/*	2	shift*/
/*	3	ctrl*/
/*	4	alt*/
/*	5	shift+alt*/
/*	6	shift+ctrl*/
/*	7	ctrl+alt*/
/*	8	shift+ctrl+alt*/
/*	9	caps-lock*/
/*	10	shift+caps-lock*/



struct key_opt {
	bool shift;
	bool ctrl;
	bool alt;
	bool caps_lock;
};

static key_opt my_opt;

void init_map(void)
{
	my_opt.shift = false;
	my_opt.ctrl = false;
	my_opt.alt = false;
	my_opt.caps_lock = false;
	led_status = 0;
	setleds(0);

	it[1][1] = 0x1b;
	it[1][2] = 0x1b;
	it[1][3] = 0x1b;
	it[1][4] = 0x1b;
	it[1][5] = 0x1b;
	it[1][6] = 0x1b;
	it[1][7] = 0x1b;
	it[1][8] = 0x1b;
	it[1][9] = 0x1b;
	it[1][10] = 0x1b;

	it[2][1] = 49;
	it[2][2] = 33;
	it[2][3] = 49;
	it[2][4] = 49;
	it[2][5] = 33;
	it[2][6] = 33;
	it[2][7] = 49;
	it[2][8] = 33;
	it[2][9] = 49;
	it[2][10] = 33;

	it[3][1] = 50;
	it[3][2] = 34;
	it[3][3] = 50;
	it[3][4] = 50;
	it[3][5] = 34;
	it[3][6] = 34;
	it[3][7] = 50;
	it[3][8] = 34;
	it[3][9] = 50;
	it[3][10] = 34;

	it[4][1] = 51;
	it[4][2] = 156;
	it[4][3] = 51;
	it[4][4] = 51;
	it[4][5] = 156;
	it[4][6] = 156;
	it[4][7] = 51;
	it[4][8] = 156;
	it[4][9] = 51;
	it[4][10] = 156;

	it[5][1] = 52;
	it[5][2] = 36;
	it[5][3] = 52;
	it[5][4] = 52;
	it[5][5] = 36;
	it[5][6] = 36;
	it[5][7] = 52;
	it[5][8] = 36;
	it[5][9] = 52;
	it[5][10] = 36;

	it[6][1] = 53;
	it[6][2] = 37;
	it[6][3] = 53;
	it[6][4] = 53;
	it[6][5] = 37;
	it[6][6] = 37;
	it[6][7] = 53;
	it[6][8] = 37;
	it[6][9] = 53;
	it[6][10] = 37;

	it[7][1] = 54;
	it[7][2] = 38;
	it[7][3] = 54;
	it[7][4] = 54;
	it[7][5] = 38;
	it[7][6] = 38;
	it[7][7] = 54;
	it[7][8] = 38;
	it[7][9] = 54;
	it[7][10] = 38;

	it[8][1] = 55;
	it[8][2] = 47;
	it[8][3] = 55;
	it[8][4] = 55;
	it[8][5] = 47;
	it[8][6] = 47;
	it[8][7] = 55;
	it[8][8] = 47;
	it[8][9] = 55;
	it[8][10] = 47;

	it[9][1] = 56;
	it[9][2] = 40;
	it[9][3] = 56;
	it[9][4] = 56;
	it[9][5] = 40;
	it[9][6] = 40;
	it[9][7] = 56;
	it[9][8] = 40;
	it[9][9] = 56;
	it[9][10] = 40;

	it[10][1] = 57;
	it[10][2] = 41;
	it[10][3] = 57;
	it[10][4] = 57;
	it[10][5] = 41;
	it[10][6] = 41;
	it[10][7] = 57;
	it[10][8] = 41;
	it[10][9] = 57;
	it[10][10] = 41;

	it[11][1] = 48;
	it[11][2] = 61;
	it[11][3] = 48;
	it[11][4] = 48;
	it[11][5] = 61;
	it[11][6] = 61;
	it[11][7] = 48;
	it[11][8] = 61;
	it[11][9] = 48;
	it[11][10] = 61;

	it[12][1] = 39;
	it[12][2] = 63;
	it[12][3] = 0;
	it[12][4] = 39;
	it[12][5] = 0;
	it[12][6] = 0;
	it[12][7] = 0;
	it[12][8] = 0;
	it[12][9] = 39;
	it[12][10] = 63;

	it[13][1] = 141;
	it[13][2] = 94;
	it[13][3] = 0;
	it[13][4] = 0;
	it[13][5] = 0;
	it[13][6] = 0;
	it[13][7] = 0;
	it[13][8] = 0;
	it[13][9] = 141;
	it[13][10] = 94;

	it[14][1] = 8;
	it[14][2] = 8;
	it[14][3] = 8;
	it[14][4] = 8;
	it[14][5] = 8;
	it[14][6] = 8;
	it[14][7] = 8;
	it[14][8] = 8;
	it[14][9] = 8;
	it[14][10] = 8;

	it[15][1] = 9;
	it[15][2] = 9;
	it[15][3] = 9;
	it[15][4] = 9;
	it[15][5] = 9;
	it[15][6] = 9;
	it[15][7] = 9;
	it[15][8] = 9;
	it[15][9] = 9;
	it[15][10] = 9;

	it[16][1] = 113;
	it[16][2] = 81;
	it[16][3] = 113;
	it[16][4] = 113;
	it[16][5] = 81;
	it[16][6] = 81;
	it[16][7] = 113;
	it[16][8] = 81;
	it[16][9] = 81;
	it[16][10] = 113;

	it[17][1] = 119;
	it[17][2] = 87;
	it[17][3] = 119;
	it[17][4] = 119;
	it[17][5] = 87;
	it[17][6] = 87;
	it[17][7] = 119;
	it[17][8] = 87;
	it[17][9] = 87;
	it[17][10] = 119;

	it[18][1] = 101;
	it[18][2] = 69;
	it[18][3] = 101;
	it[18][4] = 101;
	it[18][5] = 69;
	it[18][6] = 69;
	it[18][7] = 101;
	it[18][8] = 69;
	it[18][9] = 69;
	it[18][10] = 101;

	it[19][1] = 114;
	it[19][2] = 82;
	it[19][3] = 114;
	it[19][4] = 114;
	it[19][5] = 82;
	it[19][6] = 82;
	it[19][7] = 114;
	it[19][8] = 82;
	it[19][9] = 82;
	it[19][10] = 114;

	it[20][1] = 116;
	it[20][2] = 84;
	it[20][3] = 116;
	it[20][4] = 116;
	it[20][5] = 84;
	it[20][6] = 84;
	it[20][7] = 116;
	it[20][8] = 84;
	it[20][9] = 84;
	it[20][10] = 116;

	it[21][1] = 121;
	it[21][2] = 89;
	it[21][3] = 121;
	it[21][4] = 121;
	it[21][5] = 89;
	it[21][6] = 89;
	it[21][7] = 121;
	it[21][8] = 89;
	it[21][9] = 89;
	it[21][10] = 121;

	it[22][1] = 117;
	it[22][2] = 85;
	it[22][3] = 117;
	it[22][4] = 117;
	it[22][5] = 85;
	it[22][6] = 85;
	it[22][7] = 117;
	it[22][8] = 85;
	it[22][9] = 85;
	it[22][10] = 117;

	it[23][1] = 105;
	it[23][2] = 73;
	it[23][3] = 105;
	it[23][4] = 105;
	it[23][5] = 73;
	it[23][6] = 73;
	it[23][7] = 105;
	it[23][8] = 73;
	it[23][9] = 73;
	it[23][10] = 105;

	it[24][1] = 111;
	it[24][2] = 79;
	it[24][3] = 111;
	it[24][4] = 111;
	it[24][5] = 79;
	it[24][6] = 79;
	it[24][7] = 111;
	it[24][8] = 79;
	it[24][9] = 79;
	it[24][10] = 111;

	it[25][1] = 112;
	it[25][2] = 80;
	it[25][3] = 112;
	it[25][4] = 112;
	it[25][5] = 80;
	it[25][6] = 80;
	it[25][7] = 112;
	it[25][8] = 80;
	it[25][9] = 80;
	it[25][10] = 112;

	it[26][1] = 138;
	it[26][2] = 130;
	it[26][3] = 0;
	it[26][4] = 91;
	it[26][5] = 0;
	it[26][6] = 0;
	it[26][7] = 0;
	it[26][8] = 0;
	it[26][9] = 138;
	it[26][10] = 130;

	it[27][1] = 43;
	it[27][2] = 42;
	it[27][3] = 0;
	it[27][4] = 93;
	it[27][5] = 0;
	it[27][6] = 0;
	it[27][7] = 0;
	it[27][8] = 0;
	it[27][9] = 43;
	it[27][10] = 42;

	it[28][1] = 10;
	it[28][2] = 10;
	it[28][3] = 10;
	it[28][4] = 10;
	it[28][5] = 10;
	it[28][6] = 10;
	it[28][7] = 10;
	it[28][8] = 10;
	it[28][9] = 10;
	it[28][10] = 10;

	it[29][1] = 0;
	it[29][2] = 0;
	it[29][3] = 0;
	it[29][4] = 0;
	it[29][5] = 0;
	it[29][6] = 0;
	it[29][7] = 0;
	it[29][8] = 0;
	it[29][9] = 0;
	it[29][10] = 0;

	it[30][1] = 97;
	it[30][2] = 65;
	it[30][3] = 97;
	it[30][4] = 97;
	it[30][5] = 65;
	it[30][6] = 65;
	it[30][7] = 97;
	it[30][8] = 65;
	it[30][9] = 65;
	it[30][10] = 97;

	it[31][1] = 115;
	it[31][2] = 83;
	it[31][3] = 115;
	it[31][4] = 115;
	it[31][5] = 83;
	it[31][6] = 83;
	it[31][7] = 115;
	it[31][8] = 83;
	it[31][9] = 83;
	it[31][10] = 115;

	it[32][1] = 100;
	it[32][2] = 68;
	it[32][3] = 100;
	it[32][4] = 100;
	it[32][5] = 68;
	it[32][6] = 68;
	it[32][7] = 100;
	it[32][8] = 68;
	it[32][9] = 68;
	it[32][10] = 100;

	it[33][1] = 102;
	it[33][2] = 70;
	it[33][3] = 102;
	it[33][4] = 102;
	it[33][5] = 70;
	it[33][6] = 70;
	it[33][7] = 102;
	it[33][8] = 70;
	it[33][9] = 70;
	it[33][10] = 102;

	it[34][1] = 103;
	it[34][2] = 71;
	it[34][3] = 103;
	it[34][4] = 103;
	it[34][5] = 71;
	it[34][6] = 71;
	it[34][7] = 103;
	it[34][8] = 71;
	it[34][9] = 71;
	it[34][10] = 103;

	it[35][1] = 104;
	it[35][2] = 72;
	it[35][3] = 104;
	it[35][4] = 104;
	it[35][5] = 72;
	it[35][6] = 72;
	it[35][7] = 104;
	it[35][8] = 72;
	it[35][9] = 72;
	it[35][10] = 104;

	it[36][1] = 106;
	it[36][2] = 74;
	it[36][3] = 106;
	it[36][4] = 106;
	it[36][5] = 74;
	it[36][6] = 74;
	it[36][7] = 106;
	it[36][8] = 74;
	it[36][9] = 74;
	it[36][10] = 106;

	it[37][1] = 107;
	it[37][2] = 75;
	it[37][3] = 107;
	it[37][4] = 107;
	it[37][5] = 75;
	it[37][6] = 75;
	it[37][7] = 107;
	it[37][8] = 75;
	it[37][9] = 75;
	it[37][10] = 107;

	it[38][1] = 108;
	it[38][2] = 76;
	it[38][3] = 108;
	it[38][4] = 108;
	it[38][5] = 76;
	it[38][6] = 76;
	it[38][7] = 108;
	it[38][8] = 76;
	it[38][9] = 76;
	it[38][10] = 108;

	it[39][1] = 149;
	it[39][2] = 135;
	it[39][3] = 0;
	it[39][4] = 64;
	it[39][5] = 0;
	it[39][6] = 0;
	it[39][7] = 0;
	it[39][8] = 0;
	it[39][9] = 149;
	it[39][10] = 135;

	it[40][1] = 133;
	it[40][2] = 167;
	it[40][3] = 0;
	it[40][4] = 35;
	it[40][5] = 0;
	it[40][6] = 0;
	it[40][7] = 0;
	it[40][8] = 0;
	it[40][9] = 133;
	it[40][10] = 167;

	it[41][1] = 92;
	it[41][2] = '|';
	it[41][3] = 0;
	it[41][4] = 0;
	it[41][5] = 0;
	it[41][6] = 0;
	it[41][7] = 0;
	it[41][8] = 0;
	it[41][9] = 92;
	it[41][10] = '|';

	it[42][1] = 0;
	it[42][2] = 0;
	it[42][3] = 0;
	it[42][4] = 0;
	it[42][5] = 0;
	it[42][6] = 0;
	it[42][7] = 0;
	it[42][8] = 0;
	it[42][9] = 0;
	it[42][10] = 0;

	it[43][1] = 151;
	it[43][2] = 15;
	it[43][3] = 0;
	it[43][4] = 0;
	it[43][5] = 0;
	it[43][6] = 0;
	it[43][7] = 0;
	it[43][8] = 0;
	it[43][9] = 151;
	it[43][10] = 15;

	it[44][1] = 122;
	it[44][2] = 90;
	it[44][3] = 122;
	it[44][4] = 122;
	it[44][5] = 90;
	it[44][6] = 90;
	it[44][7] = 122;
	it[44][8] = 90;
	it[44][9] = 90;
	it[44][10] = 122;

	it[45][1] = 120;
	it[45][2] = 88;
	it[45][3] = 120;
	it[45][4] = 120;
	it[45][5] = 88;
	it[45][6] = 88;
	it[45][7] = 120;
	it[45][8] = 88;
	it[45][9] = 88;
	it[45][10] = 120;

	it[46][1] = 99;
	it[46][2] = 67;
	it[46][3] = 99;
	it[46][4] = 99;
	it[46][5] = 67;
	it[46][6] = 67;
	it[46][7] = 99;
	it[46][8] = 67;
	it[46][9] = 67;
	it[46][10] = 99;

	it[47][1] = 118;
	it[47][2] = 86;
	it[47][3] = 118;
	it[47][4] = 118;
	it[47][5] = 86;
	it[47][6] = 86;
	it[47][7] = 118;
	it[47][8] = 86;
	it[47][9] = 86;
	it[47][10] = 118;

	it[48][1] = 98;
	it[48][2] = 66;
	it[48][3] = 98;
	it[48][4] = 98;
	it[48][5] = 66;
	it[48][6] = 66;
	it[48][7] = 98;
	it[48][8] = 66;
	it[48][9] = 66;
	it[48][10] = 98;

	it[49][1] = 110;
	it[49][2] = 78;
	it[49][3] = 110;
	it[49][4] = 110;
	it[49][5] = 78;
	it[49][6] = 78;
	it[49][7] = 110;
	it[49][8] = 78;
	it[49][9] = 78;
	it[49][10] = 110;

	it[50][1] = 109;
	it[50][2] = 77;
	it[50][3] = 109;
	it[50][4] = 109;
	it[50][5] = 77;
	it[50][6] = 77;
	it[50][7] = 109;
	it[50][8] = 77;
	it[50][9] = 77;
	it[50][10] = 109;

	it[51][1] = ',';
	it[51][2] = ';';
	it[51][3] = 0;
	it[51][4] = 0;
	it[51][5] = 0;
	it[51][6] = 0;
	it[51][7] = 0;
	it[51][8] = 0;
	it[51][9] = '.';
	it[51][10] = ';';

	it[52][1] = '.';
	it[52][2] = ':';
	it[52][3] = 0;
	it[52][4] = 0;
	it[52][5] = 0;
	it[52][6] = 0;
	it[52][7] = 0;
	it[52][8] = 0;
	it[52][9] = '.';
	it[52][10] = ':';

	it[53][1] = '-';
	it[53][2] = '_';
	it[53][3] = 0;
	it[53][4] = 0;
	it[53][5] = 0;
	it[53][6] = 0;
	it[53][7] = 0;
	it[53][8] = 0;
	it[53][9] = '-';
	it[53][10] = '_';

	it[54][1] = 0;
	it[54][2] = 0;
	it[54][3] = 0;
	it[54][4] = 0;
	it[54][5] = 0;
	it[54][6] = 0;
	it[54][7] = 0;
	it[54][8] = 0;
	it[54][9] = 0;
	it[54][10] = 0;

	it[55][1] = 42;
	it[55][2] = 42;
	it[55][3] = 0;
	it[55][4] = 42;
	it[55][5] = 0;
	it[55][6] = 0;
	it[55][7] = 0;
	it[55][8] = 0;
	it[55][9] = 42;
	it[55][10] = 42;

	it[56][1] = 0;
	it[56][2] = 0;
	it[56][3] = 0;
	it[56][4] = 0;
	it[56][5] = 0;
	it[56][6] = 0;
	it[56][7] = 0;
	it[56][8] = 0;
	it[56][9] = 0;
	it[56][10] = 0;

	it[57][1] = 32;
	it[57][2] = 32;
	it[57][3] = 32;
	it[57][4] = 32;
	it[57][5] = 32;
	it[57][6] = 32;
	it[57][7] = 32;
	it[57][8] = 32;
	it[57][9] = 32;
	it[57][10] = 32;

	it[58][1] = 0;
	it[58][2] = 0;
	it[58][3] = 0;
	it[58][4] = 0;
	it[58][5] = 0;
	it[58][6] = 0;
	it[58][7] = 0;
	it[58][8] = 0;
	it[58][9] = 0;
	it[58][10] = 0;

	it[59][1] = 0;
	it[59][2] = 0;
	it[59][3] = 0;
	it[59][4] = 0;
	it[59][5] = 0;
	it[59][6] = 0;
	it[59][7] = 0;
	it[59][8] = 0;
	it[59][9] = 0;
	it[59][10] = 0;

	it[60][1] = 0;
	it[60][2] = 0;
	it[60][3] = 0;
	it[60][4] = 0;
	it[60][5] = 0;
	it[60][6] = 0;
	it[60][7] = 0;
	it[60][8] = 0;
	it[60][9] = 0;
	it[60][10] = 0;

	it[61][1] = 0;
	it[61][2] = 0;
	it[61][3] = 0;
	it[61][4] = 0;
	it[61][5] = 0;
	it[61][6] = 0;
	it[61][7] = 0;
	it[61][8] = 0;
	it[61][9] = 0;
	it[61][10] = 0;

	it[62][1] = 0;
	it[62][2] = 0;
	it[62][3] = 0;
	it[62][4] = 0;
	it[62][5] = 0;
	it[62][6] = 0;
	it[62][7] = 0;
	it[62][8] = 0;
	it[62][9] = 0;
	it[62][10] = 0;

	it[63][1] = 0;
	it[63][2] = 0;
	it[63][3] = 0;
	it[63][4] = 0;
	it[63][5] = 0;
	it[63][6] = 0;
	it[63][7] = 0;
	it[63][8] = 0;
	it[63][9] = 0;
	it[63][10] = 0;

	it[64][1] = 0;
	it[64][2] = 0;
	it[64][3] = 0;
	it[64][4] = 0;
	it[64][5] = 0;
	it[64][6] = 0;
	it[64][7] = 0;
	it[64][8] = 0;
	it[64][9] = 0;
	it[64][10] = 0;

	it[65][1] = 0;
	it[65][2] = 0;
	it[65][3] = 0;
	it[65][4] = 0;
	it[65][5] = 0;
	it[65][6] = 0;
	it[65][7] = 0;
	it[65][8] = 0;
	it[65][9] = 0;
	it[65][10] = 0;

	it[66][1] = 0;
	it[66][2] = 0;
	it[66][3] = 0;
	it[66][4] = 0;
	it[66][5] = 0;
	it[66][6] = 0;
	it[66][7] = 0;
	it[66][8] = 0;
	it[66][9] = 0;
	it[66][10] = 0;

	it[67][1] = 0;
	it[67][2] = 0;
	it[67][3] = 0;
	it[67][4] = 0;
	it[67][5] = 0;
	it[67][6] = 0;
	it[67][7] = 0;
	it[67][8] = 0;
	it[67][9] = 0;
	it[67][10] = 0;

	it[68][1] = 0;
	it[68][2] = 0;
	it[68][3] = 0;
	it[68][4] = 0;
	it[68][5] = 0;
	it[68][6] = 0;
	it[68][7] = 0;
	it[68][8] = 0;
	it[68][9] = 0;
	it[68][10] = 0;

	it[69][1] = 0;
	it[69][2] = 0;
	it[69][3] = 0;
	it[69][4] = 0;
	it[69][5] = 0;
	it[69][6] = 0;
	it[69][7] = 0;
	it[69][8] = 0;
	it[69][9] = 0;
	it[69][10] = 0;

	it[70][1] = 0;
	it[70][2] = 0;
	it[70][3] = 0;
	it[70][4] = 0;
	it[70][5] = 0;
	it[70][6] = 0;
	it[70][7] = 0;
	it[70][8] = 0;
	it[70][9] = 0;
	it[70][10] = 0;

	it[71][1] = 55;
	it[71][2] = 55;
	it[71][3] = 55;
	it[71][4] = 55;
	it[71][5] = 55;
	it[71][6] = 55;
	it[71][7] = 55;
	it[71][8] = 55;
	it[71][9] = 55;
	it[71][10] = 55;

	it[72][1] = 56;
	it[72][2] = 56;
	it[72][3] = 56;
	it[72][4] = 56;
	it[72][5] = 56;
	it[72][6] = 56;
	it[72][7] = 56;
	it[72][8] = 56;
	it[72][9] = 56;
	it[72][10] = 56;

	it[73][1] = 57;
	it[73][2] = 57;
	it[73][3] = 57;
	it[73][4] = 57;
	it[73][5] = 57;
	it[73][6] = 57;
	it[73][7] = 57;
	it[73][8] = 57;
	it[73][9] = 57;
	it[73][10] = 57;

	it[74][1] = 45;
	it[74][2] = 45;
	it[74][3] = 45;
	it[74][4] = 45;
	it[74][5] = 45;
	it[74][6] = 45;
	it[74][7] = 45;
	it[74][8] = 45;
	it[74][9] = 45;
	it[74][10] = 45;

	it[75][1] = 52;
	it[75][2] = 52;
	it[75][3] = 52;
	it[75][4] = 52;
	it[75][5] = 52;
	it[75][6] = 52;
	it[75][7] = 52;
	it[75][8] = 52;
	it[75][9] = 52;
	it[75][10] = 52;

	it[76][1] = 53;
	it[76][2] = 53;
	it[76][3] = 53;
	it[76][4] = 53;
	it[76][5] = 53;
	it[76][6] = 53;
	it[76][7] = 53;
	it[76][8] = 53;
	it[76][9] = 53;
	it[76][10] = 53;

	it[77][1] = 54;
	it[77][2] = 54;
	it[77][3] = 54;
	it[77][4] = 54;
	it[77][5] = 54;
	it[77][6] = 54;
	it[77][7] = 54;
	it[77][8] = 54;
	it[77][9] = 54;
	it[77][10] = 54;

	it[78][1] = 43;
	it[78][2] = 43;
	it[78][3] = 43;
	it[78][4] = 43;
	it[78][5] = 43;
	it[78][6] = 43;
	it[78][7] = 43;
	it[78][8] = 43;
	it[78][9] = 43;
	it[78][10] = 43;

	it[79][1] = 49;
	it[79][2] = 49;
	it[79][3] = 49;
	it[79][4] = 49;
	it[79][5] = 49;
	it[79][6] = 49;
	it[79][7] = 49;
	it[79][8] = 49;
	it[79][9] = 49;
	it[79][10] = 49;

	it[80][1] = 50;
	it[80][2] = 50;
	it[80][3] = 50;
	it[80][4] = 50;
	it[80][5] = 50;
	it[80][6] = 50;
	it[80][7] = 50;
	it[80][8] = 50;
	it[80][9] = 50;
	it[80][10] = 50;

	it[81][1] = 51;
	it[81][2] = 51;
	it[81][3] = 51;
	it[81][4] = 51;
	it[81][5] = 51;
	it[81][6] = 51;
	it[81][7] = 51;
	it[81][8] = 51;
	it[81][9] = 51;
	it[81][10] = 51;

	it[82][1] = 48;
	it[82][2] = 48;
	it[82][3] = 48;
	it[82][4] = 48;
	it[82][5] = 48;
	it[82][6] = 48;
	it[82][7] = 48;
	it[82][8] = 48;
	it[82][9] = 48;
	it[82][10] = 48;

	it[83][1] = 46;
	it[83][2] = 46;
	it[83][3] = 46;
	it[83][4] = 46;
	it[83][5] = 46;
	it[83][6] = 46;
	it[83][7] = 46;
	it[83][8] = 46;
	it[83][9] = 46;
	it[83][10] = 46;

	it[84][1] = 0;
	it[84][2] = 0;
	it[84][3] = 0;
	it[84][4] = 0;
	it[84][5] = 0;
	it[84][6] = 0;
	it[84][7] = 0;
	it[84][8] = 0;
	it[84][9] = 0;
	it[84][10] = 0;

	it[85][1] = 0;
	it[85][2] = 0;
	it[85][3] = 0;
	it[85][4] = 0;
	it[85][5] = 0;
	it[85][6] = 0;
	it[85][7] = 0;
	it[85][8] = 0;
	it[85][9] = 0;
	it[85][10] = 0;

	it[86][1] = 60;
	it[86][2] = 62;
	it[86][3] = 0;
	it[86][4] = 60;
	it[86][5] = 0;
	it[86][6] = 0;
	it[86][7] = 0;
	it[86][8] = 0;
	it[86][9] = 60;
	it[86][10] = 62;

	it[87][1] = 0;
	it[87][2] = 0;
	it[87][3] = 0;
	it[87][4] = 0;
	it[87][5] = 0;
	it[87][6] = 0;
	it[87][7] = 0;
	it[87][8] = 0;
	it[87][9] = 0;
	it[87][10] = 0;

	it[88][1] = 0;
	it[88][2] = 0;
	it[88][3] = 0;
	it[88][4] = 0;
	it[88][5] = 0;
	it[88][6] = 0;
	it[88][7] = 0;
	it[88][8] = 0;
	it[88][9] = 0;
	it[88][10] = 0;

	it[89][1] = 0;
	it[89][2] = 0;
	it[89][3] = 0;
	it[89][4] = 0;
	it[89][5] = 0;
	it[89][6] = 0;
	it[89][7] = 0;
	it[89][8] = 0;
	it[89][9] = 0;
	it[89][10] = 0;

	it[90][1] = 0;
	it[90][2] = 0;
	it[90][3] = 0;
	it[90][4] = 0;
	it[90][5] = 0;
	it[90][6] = 0;
	it[90][7] = 0;
	it[90][8] = 0;
	it[90][9] = 0;
	it[90][10] = 0;

	it[91][1] = 0;
	it[91][2] = 0;
	it[91][3] = 0;
	it[91][4] = 0;
	it[91][5] = 0;
	it[91][6] = 0;
	it[91][7] = 0;
	it[91][8] = 0;
	it[91][9] = 0;
	it[91][10] = 0;

	it[92][1] = 0;
	it[92][2] = 0;
	it[92][3] = 0;
	it[92][4] = 0;
	it[92][5] = 0;
	it[92][6] = 0;
	it[92][7] = 0;
	it[92][8] = 0;
	it[92][9] = 0;
	it[92][10] = 0;

	it[93][1] = 0;
	it[93][2] = 0;
	it[93][3] = 0;
	it[93][4] = 0;
	it[93][5] = 0;
	it[93][6] = 0;
	it[93][7] = 0;
	it[93][8] = 0;
	it[93][9] = 0;
	it[93][10] = 0;

	it[94][1] = 0;
	it[94][2] = 0;
	it[94][3] = 0;
	it[94][4] = 0;
	it[94][5] = 0;
	it[94][6] = 0;
	it[94][7] = 0;
	it[94][8] = 0;
	it[94][9] = 0;
	it[94][10] = 0;

	it[95][1] = 0;
	it[95][2] = 0;
	it[95][3] = 0;
	it[95][4] = 0;
	it[95][5] = 0;
	it[95][6] = 0;
	it[95][7] = 0;
	it[95][8] = 0;
	it[95][9] = 0;
	it[95][10] = 0;

	it[96][1] = 0;
	it[96][2] = 0;
	it[96][3] = 0;
	it[96][4] = 0;
	it[96][5] = 0;
	it[96][6] = 0;
	it[96][7] = 0;
	it[96][8] = 0;
	it[96][9] = 0;
	it[96][10] = 0;

	it[97][1] = 0;
	it[97][2] = 0;
	it[97][3] = 0;
	it[97][4] = 0;
	it[97][5] = 0;
	it[97][6] = 0;
	it[97][7] = 0;
	it[97][8] = 0;
	it[97][9] = 0;
	it[97][10] = 0;

	it[98][1] = 0;
	it[98][2] = 0;
	it[98][3] = 0;
	it[98][4] = 0;
	it[98][5] = 0;
	it[98][6] = 0;
	it[98][7] = 0;
	it[98][8] = 0;
	it[98][9] = 0;
	it[98][10] = 0;

	it[99][1] = 0;
	it[99][2] = 0;
	it[99][3] = 0;
	it[99][4] = 0;
	it[99][5] = 0;
	it[99][6] = 0;
	it[99][7] = 0;
	it[99][8] = 0;
	it[99][9] = 0;
	it[99][10] = 0;

	it[100][1] = 0;
	it[100][2] = 0;
	it[100][3] = 0;
	it[100][4] = 0;
	it[100][5] = 0;
	it[100][6] = 0;
	it[100][7] = 0;
	it[100][8] = 0;
	it[100][9] = 0;
	it[100][10] = 0;

	it[101][1] = 0;
	it[101][2] = 0;
	it[101][3] = 0;
	it[101][4] = 0;
	it[101][5] = 0;
	it[101][6] = 0;
	it[101][7] = 0;
	it[101][8] = 0;
	it[101][9] = 0;
	it[101][10] = 0;

	it[102][1] = 0;
	it[102][2] = 0;
	it[102][3] = 0;
	it[102][4] = 0;
	it[102][5] = 0;
	it[102][6] = 0;
	it[102][7] = 0;
	it[102][8] = 0;
	it[102][9] = 0;
	it[102][10] = 0;

	it[103][1] = 0;
	it[103][2] = 0;
	it[103][3] = 0;
	it[103][4] = 0;
	it[103][5] = 0;
	it[103][6] = 0;
	it[103][7] = 0;
	it[103][8] = 0;
	it[103][9] = 0;
	it[103][10] = 0;

//      type = 1;

	return;
}
//#include <cstddef>
	//static  size_t type ;

#include <vt100.h>

#define NO_VALID_SCANDODE -1



int scan2ascii(int car)
{
	//kout << "Sono lo scancode: " << car << endl;
	switch (car) {
	case 42:		//è stato premuto lo shift
	case 54:
		my_opt.shift = true;
		return NO_VALID_SCANDODE;
	case 170:		//è stato depresso lo shift
	case 182:
		my_opt.shift = false;
		return NO_VALID_SCANDODE;
	case 29:		//è stato premuto ctrl
	case 57373:
		my_opt.ctrl = true;
		return NO_VALID_SCANDODE;
	case 157:		//è stato depresso ctrl
	case 57501:
		my_opt.ctrl = false;
		return NO_VALID_SCANDODE;
	case 56:		//è stato premuto alt
	case 57400:
		my_opt.alt = true;
		return NO_VALID_SCANDODE;
	case 184:		//è stato depresso alt
	case 57528:
		my_opt.alt = false;
		return NO_VALID_SCANDODE;
	case 58:		//è stato premuto caps lock
		my_opt.caps_lock = !my_opt.caps_lock;
		led_status ^= 4;
		setleds(led_status);
		return NO_VALID_SCANDODE;
	case 69:		// è il block num
		led_status ^= 2;
		setleds(led_status);
		return NO_VALID_SCANDODE;
	case 70:		// è il block scrorr
		led_status ^= 1;
		setleds(led_status);
		return NO_VALID_SCANDODE;
	case 71:
	case 72:
	case 73:
	case 75:
	case 76:
	case 77:
	case 79:
	case 80:
	case 81:
	case 82:
		if (!(led_status & 2))
			return NO_VALID_SCANDODE;
	case 57416:		//è la freccia in alto 
		//ritorno ESC[A
		return FRECCIA_ALTA;
	case 57421:		//è la freccia a destra
		//ritorno ESC[C
		return FRECCIA_DESTRA;
	case 57419:		//è la freccia a sinistra
		//ritorno ESC[D
		return FRECCIA_SINISTRA;
	case 57424:		//è la freccia a sinistra
		//ritorno ESC[B
		return FRECCIA_BASSA;
	}
	byte type = 1;
	if (my_opt.shift) {
		if (my_opt.ctrl) {
			if (my_opt.alt) {
				type = 8;
//                              kout << "\nSHIFT + CTRL + ALT\n";
			} else {
				type = 6;
//                              kout << "\nSHIFT + CTRL\n";
			}
		} else {
			if (my_opt.alt) {
//                              kout << "\nSHIFT  + ALT\n";
				type = 5;
			} else {
				if (my_opt.caps_lock) {
//                                      kout << "\nSHIFT + CAPS LOCK\n";
					type = 10;
				} else {
//                                      kout << "\nSHIFT\n";
					type = 2;
				}
			}
		}
	} else {
		if (my_opt.ctrl) {
			if (my_opt.alt) {
//                              kout << "\nCTRL + ALT\n";
				type = 7;
			} else {
//                              kout << "\nCTRL\n";
				type = 3;
			}
		} else {
			if (my_opt.alt) {
//                                      kout << "\nALT\n";
				type = 4;
			} else {
				if (my_opt.caps_lock) {
//                                              kout << "\nCAPS LOCK\n";
					type = 9;
				}
			}
		}
	}
	if (car < 104)
		return it[car][type];
	return NO_VALID_SCANDODE;
}

int sys_getchar()
{
	int carattere;
	//kout << "\nsono la sys_getchar" << endl;
	while ((carattere = scan2ascii(get_char())) == NO_VALID_SCANDODE);
	return carattere;
}

char *sys_gets(char *string)
{
	dword count = 0;
	int c = 0;
	size_t pos = kout.get_pos();

	debug << "\nciao sono la sys_gets\n";

	while (1) {
		c = sys_getchar();
		debug << "\nho letto " << (dword) c << endl;
		if (c == BACKSPACE) {
			if (kout.get_pos() == pos)
				continue;
			kout << (char) BACKSPACE;
			if (count)
				count--;
			continue;
		}
		if (c == NEWLINE) {
			debug << "\nstampo l'invio\n";
			printf("\n");
			break;
		}
		debug << "\naggiungo il carattere " << (dword) c <<
			" alla posizione " << count << endl;
		string[count] = c;
		count++;
		printf("%c", c);
	}
	string[count] = 0;
	return string;
}
